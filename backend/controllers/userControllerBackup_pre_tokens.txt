const jwt = require('jsonwebtoken')
const bcrypt = require('bcrypt')
const asyncHandler = require('express-async-handler')
const User = require('../models/userModel')

const userExists = asyncHandler(async (req, res) => {
  const user = await User.findOne()

  if (user) {
    res.json({
      exists: true,
    })
  } else {
    res.json({
      exists: false,
    })
  }

  return user
})

const registerUser = asyncHandler(async (req, res) => {
  console.log(req.body)

  //Check if admin already exists
  const admin = await User.findOne()

  if (!admin) {
    // Check if body data exits
    if (!req.body.email || !req.body.password || !req.body.passwordConfirm) {
      res.status(422)
      throw new Error('Please add all fields.')
    }

    // Compare passwords
    if (req.body.password !== req.body.passwordConfirm) {
      res.status(422)
      throw new Error('Passwords do not match.')
    }

    // Hash password
    const salt = await bcrypt.genSalt(10)
    const hashedPassword = await bcrypt.hash(req.body.password, salt)

    // Create user
    const user = await User.create({
      email: req.body.email,
      password: hashedPassword,
    })

    // Respond
    if (user) {
      res.status(201).json({
        _id: user._id,
        email: user.email,
        token: generateToken(user._id),
      })
    } else {
      res.status(400)
      throw new Error('Invalid user data.')
    }
  } else {
    res.status(401).json({
      message: 'An admin already exits.',
    })
  }
})

const loginUser = asyncHandler(async (req, res) => {
  // Check if body data exits
  if (!req.body.email || !req.body.password) {
    res.status(422)
    throw new Error('Please add all fields.')
  }

  // Authenticate email and password
  const user = await User.findOne({ email: req.body.email })

  if (user && (await bcrypt.compare(req.body.password, user.password))) {
    res.json({
      // success: true,
      _id: user._id,
      email: user.email,
      token: generateToken(user._id),
    })
  } else {
    res.status(401).json({
      // success: false,
      message: 'Invalid credentials.',
    })
  }
})

const deleteUser = asyncHandler(async (req, res) => {
  // Check if body data exits
  if (!req.body.email || !req.body.password) {
    res.status(422)
    throw new Error('Please add all relevant information.')
  }

  // Authenticate email and password
  const user = await User.findOne({ email: req.body.email })

  if (user && (await bcrypt.compare(req.body.password, user.password))) {
    await User.deleteOne({ email: req.body.email })
    res.json({
      success: true,
      message: 'User has been deleted.',
    })
  } else {
    res.status(401).json({
      success: false,
      message: 'Invalid credentials/password.',
    })
  }
})

// Generate JWT
const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: '1d',
  })
}

// Generate Access and Refresh Tokens
const generateTokens = (id) => {
  const accessToken = jwt.sign({ id }, process.env.ACCESS_TOKEN_SECRET, {
    expiresIn: '10s',
  })

  const refreshToken = jwt.sign({ id }, process.REFRESH_TOKEN_SECRET, {
    expiresIn: '1d',
  })

  return {
    accessToken,
    refreshToken,
  }
}

module.exports = {
  userExists,
  registerUser,
  loginUser,
  deleteUser,
}
