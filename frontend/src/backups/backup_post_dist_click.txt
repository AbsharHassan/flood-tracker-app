import React, { useState, useEffect } from 'react'
import GoogleMapReact from 'google-map-react'
import ee from '@google/earthengine'
import axios from 'axios'
import mapStyles from '../MapModification/mapStyles'
import TestMarker from './TestMarker'
import coordinatesObject from '../MapModification/tempGeoCoords'
import newCoordsPak from '../MapModification/newCoordsPak'

const Map = ({
  center,
  zoom,
  isbDisplayPolygon,
  chitralDisplayPolygon,
  backendData,
  shouldMapLoad,
}) => {
  const [apiDataArray, setApiDataArray] = useState([])
  const [apiRoadCoords, setApiRoadCoords] = useState([])
  const [nativeMap, setNativeMap] = useState(null)
  const [nativeMaps, setNativeMaps] = useState(null)
  const [polygonArray, setPolygonArray] = useState([])
  const [customZoom, setCustomZoom] = useState(null)
  const [customCenter, setCustomCenter] = useState({
    // lat: 27.0127,
    // lng: 65.477913,
  })

  useEffect(() => {
    // console.log('this is a mount')
  }, [])

  useEffect(() => {
    if (backendData.length) {
      sortBackendData(backendData)
    }
  }, [backendData])

  useEffect(() => {
    if (nativeMap && nativeMaps) {
      nativeApiHandler(nativeMap, nativeMaps)
    }
  })

  const sortBackendData = (data) => {
    const intermediateArray1 = data.map((innerObject) => {
      if (innerObject.geometry.type === 'Polygon') {
        const coordinates = innerObject.geometry.coordinates[0].map(
          (coords) => {
            return { lat: coords[1], lng: coords[0] }
          }
        )
        const roadCoords = innerObject.results.roads.map((coords) => {
          return { lat: coords[1], lng: coords[0] }
        })
        innerObject.results.roads = roadCoords
        const centerCoords = {
          lat: innerObject.center.coordinates[1],
          lng: innerObject.center.coordinates[0],
        }
        return {
          name: innerObject.district,
          results: innerObject.results,
          center: centerCoords,
          coordinates: coordinates,
        }
      } else if (innerObject.geometry.type === 'MultiPolygon') {
        const coordinates = innerObject.geometry.coordinates[
          innerObject.geometry.coordinates.length - 1
        ][0].map((coords) => {
          return { lat: coords[1], lng: coords[0] }
        })
        const roadCoords = innerObject.results.roads.map((coords) => {
          return { lat: coords[1], lng: coords[0] }
        })
        innerObject.results.roads = roadCoords
        const centerCoords = {
          lat: innerObject.center.coordinates[1],
          lng: innerObject.center.coordinates[0],
        }
        return {
          name: innerObject.district,
          results: innerObject.results,
          center: centerCoords,
          coordinates: coordinates,
        }
      } else if (innerObject.geometry.type === 'GeometryCollection') {
        if (
          !(
            innerObject.geometry.geometries[
              innerObject.geometry.geometries.length - 1
            ].coordinates.length > 1
          )
        ) {
          const coordinates = innerObject.geometry.geometries[
            innerObject.geometry.geometries.length - 1
          ].coordinates[0].map((coords) => {
            return { lat: coords[1], lng: coords[0] }
          })
          const roadCoords = innerObject.results.roads.map((coords) => {
            return { lat: coords[1], lng: coords[0] }
          })
          innerObject.results.roads = roadCoords
          const centerCoords = {
            lat: innerObject.center.coordinates[1],
            lng: innerObject.center.coordinates[0],
          }
          return {
            name: innerObject.district,
            results: innerObject.results,
            center: centerCoords,
            coordinates: coordinates,
          }
        } else {
          const coordinates = innerObject.geometry.geometries[
            innerObject.geometry.geometries.length - 1
          ].coordinates[0].map((coords) => {
            return { lat: coords[1], lng: coords[0] }
          })
          const roadCoords = innerObject.results.roads.map((coords) => {
            return { lat: coords[1], lng: coords[0] }
          })
          innerObject.results.roads = roadCoords
          const centerCoords = {
            lat: innerObject.center.coordinates[1],
            lng: innerObject.center.coordinates[0],
          }
          return {
            name: innerObject.district,
            results: innerObject.results,
            center: centerCoords,
            coordinates: coordinates,
          }
        }
      }
    })
    setApiDataArray(intermediateArray1)
    const intermediateArray2 = intermediateArray1.map((innerArray) => {
      return innerArray.results.roads
    })
    const intermediateArray3 = [].concat(...intermediateArray2)
    setApiRoadCoords(intermediateArray3)
  }

  const nativeApiHandler = (map, maps) => {
    // const mapid =
    //   'projects/earthengine-legacy/maps/89eae3f8ab2f778a610c1d55d01d3d32-252a6279724f548155ffacdfb23c3c79'
    // const tileSource = new ee.layers.EarthEngineTileSource({
    //   mapid,
    // })
    // const overlay = new ee.layers.ImageOverlay(tileSource)
    // map.overlayMapTypes.push(overlay)
    // console.log(polygonArray[0])
    // polygonArray[0].setMap(map)
    // polygonArray[0].addListener('click', () => {
    //   setCustomCenter(polygonArray[0].center)
    //   setCustomZoom(10)
    // })
    polygonArray.map((polygon) => {
      polygon.setMap(map)
      polygon.addListener('click', async () => {
        console.log(polygon.fillOpacity)
        setCustomCenter(polygon.center)
        map.setZoom(8)
        polygon.setOptions({
          fillOpacity: 0,
        })
        const mapid = await axios
          .post(`http://127.0.0.1:5000/api/district`, {
            district: polygon.name,
          })
          .then((response) => {
            console.log(response.data)
            const mapid = response.data
            const tileSource = new ee.layers.EarthEngineTileSource({
              mapid,
            })
            const overlay = new ee.layers.ImageOverlay(tileSource)
            console.log(overlay)
            map.overlayMapTypes.push(overlay)
          })
          .catch((error) => {
            console.log(error)
          })
      })
      // polygon.addListener('mouseover', () => {
      //   console.log(polygon.name)
      //   someIndex++
      // })
    })
  }

  if (!shouldMapLoad) {
    return null
  }

  const handleApiLoaded = (map, maps) => {
    const newCoordsPakArrayReducedArray = [].concat(...newCoordsPak)

    const holePolygonCoords = newCoordsPakArrayReducedArray.map(
      (innerArrays) => {
        return innerArrays.map((coords) => {
          return { lat: coords[1], lng: coords[0] }
        })
      }
    )

    const coverPolygonCoords = [
      //anti-clockwise
      { lat: -89, lng: 0 },
      { lat: -89, lng: 179 },
      { lat: 89, lng: 179 },
      { lat: 89, lng: 0 },
      { lat: -89, lng: 0 },
    ]

    holePolygonCoords.unshift(coverPolygonCoords)

    map.data.add({
      geometry: new maps.Data.Polygon(holePolygonCoords),
    })

    map.data.setStyle({
      fillColor: '#000033',
      strokeWeight: 1,
      fillOpacity: 1,
    })

    const districtPolygons = apiDataArray.map((districtObject) => {
      return new maps.Polygon({
        paths: districtObject.coordinates,
        strokeColor: 'black',
        strokeOpacity: 1,
        strokeWeight: 0.2,
        fillColor: '#00FFFF',
        fillOpacity:
          districtObject.results.after.floodWater / 47.884848397951224,
        name: districtObject.name,
        center: districtObject.center,
      })
    })

    setPolygonArray(districtPolygons)
    setNativeMap(map)
    setNativeMaps(maps)
  }
  return (
    <div className="map">
      <GoogleMapReact
        bootstrapURLKeys={{
          key: 'AIzaSyB2p2Qz--7VtnL-nfjknSoWl4wfUKaj024',
        }}
        options={{
          styles: mapStyles.darkTheme,
          restriction: {
            latLngBounds: {
              north: 40,
              south: 20,
              west: 55,
              east: 82,
            },
            strictBounds: false,
          },
        }}
        defaultCenter={{ lat: 30.3753, lng: 69.3451 }}
        center={Object.keys(customCenter).length ? customCenter : center}
        defaultZoom={zoom}
        zoom={customZoom ? customZoom : zoom}
        yesIWantToUseGoogleMapApiInternals
        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}
      >
        {/* <TestMarker
          lat={Object.keys(customCenter).length ? customCenter.lat : center.lat}
          lng={Object.keys(customCenter).length ? customCenter.lng : center.lng}
        /> */}
        {/* {apiDataArray.map((districtArray) => {
          // if(districtArray[1].roads.length) {console.log(districtArray[1].roads.length)}
          if (districtArray[1].roads.length) {
            districtArray[1].roads.map((coords, i) => (
              <TestMarker
                key={i}
                lat={coords.lat}
                lng={coords.lng}
              />
            ))
          } else {
            // console.log('nothing here')
          }
        })} */}
        {/* {apiRoadCoords.map((coordinates, i) => (
          <TestMarker
            key={i}
            lat={coordinates.lat}
            lng={coordinates.lng}
          />
        ))} */}
      </GoogleMapReact>
    </div>
  )
}

Map.defaultProps = {
  zoom: 6,
  // center: { lat: 30.3753, lng: 69.3451 },
  isbDisplayPolygon: true,
  chitralDisplayPolygon: true,
}

export default Map
